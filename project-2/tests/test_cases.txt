List of Possible Things to Test

--- SCHEDULE TESTS ---

DONE 1. A single periodic task runs when it is supposed to, with nothing else going on.
DONE 2. Multiple periodic tasks that do not overlap run when they are supposed to and succeed.
DONE 3. A single periodic task with an offset runs when it is supposed to.
DONE 4. Two periodic tasks that overlap cause an error.

37. Two periodic tests that overlap but can both finish within one millisecond work fine.
20. Test the ordering of delayed tasks.
     - Create one delayed task to run at 500
     - Create one delayed task to run at 300
     - Start the OS
     - Assert that they were inserted into the list and ran in the correct order.
4. Two instances of a task have and use their correct state structures.
9. An event going off makes the corresponding event-driven task go off, with nothing else going on.
11. An interrupt goes off during a periodic task. What happens?
12. An interrupt goes off during a delayed task. What happens?
13. Sequence of events:
     - periodic task runs
     - interrupt goes off
     - periodic task finishes
     - event driven task runs
     - event driven task finishes
     - periodic task runs
    This makes sure that the periodic task is allowed to finish and that the event-driven task runs 
    because there is enough time for it to run.
14. One periodic task. Many delayed tasks and event-driven tasks to try to overload the time between
    periods. Assert that the scheduler still runs the periodic task on time.
17. Sequence of events:
     - periodic task runs
     - interrupt goes off
     - periodic task finishes
     - event driven task does not run because there is not enough time for it to finish
     - periodic task runs
    This makes sure that the periodic task is allowed to finish and that the scheduler only runs tasks
    when it knows it has enough time to.
18. Dispatch an event before the OS is dispatched. Should remember it and handle it.
21. Within one large idle time, an interrupt goes off twice and the event-driven task is ran twice.
22. A delayed task that terminates is ran once and then never again.
23. A delayed task that creates itself is ran twice, or multiple times.
24. A periodic task can become an event-driven task correctly.
25. An event-driven task can become a periodic task correctly.
26. A periodic task can become a delayed task for one time and then terminate.
27. A delayed task can become an event-driven task.
28. An event-driven task can become a delayed task.
29. If I missed any other combinations of the above tests...
31. A periodic task that wants to become an event-driven task cannot if the event it wants to listen
    to is already taken. Error should be issued when you try to dispatch the task.
34. A delayed task that is scheduled to go off during a periodic task does not preempt the periodic task
    but does correctly run later when it has time.
35. A task's state stays the same when it is switched between task types.
36. If the user creates enough tasks that there is no idle time and tasks miss their deadlines, errors
    will go off. Ex: periodic task A at 500, periodic task B at 501, but task A takes too long.


--- UNIT TESTS ---

DONE 1. Creating too many events.
UNIT 2. Creating too many tasks.

UNIT 5. Creating a periodic task puts it in the periodic_tasks list.
UNIT 6. Creating a delayed task puts it in the delayed_tasks list.
UNIT 7. Creating an event-driven task puts it in the events_tasks list.
UNIT 30. Assert that you cannot create two tasks that listen to the same event.


--- DECIDEDLY NO TESTS ---

NO 8. An ISR sets the correct event bit.
NO 10. An interrupt goes off during a context switch. What happens?
NO 19. An interrupt goes off during tracing.
NO 33. Multiple periodic tasks with offsets run when they are supposed to.